name: Deploy BASF AI Workshop

on:
  push:
    branches:
      - main
      - production
  pull_request:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: basf-ai-workshop
  REGION: us-central1

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Application
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Lint code
        run: |
          npx eslint server.js --ignore-pattern node_modules/ || true
          echo "Linting completed"

      - name: Test server startup
        run: |
          timeout 10 node server.js &
          sleep 5
          curl -f http://localhost:8080/health || echo "Health check failed but continuing"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    name: Deploy to Google Cloud
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Build and push Docker image
        run: |
          docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
          docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $SERVICE_NAME \
            --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
            --region $REGION \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars PROJECT_ID=$PROJECT_ID \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 10 \
            --timeout 300

      - name: Get service URL
        id: url
        run: |
          URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
          echo "service_url=$URL" >> $GITHUB_OUTPUT

      - name: Update deployment status
        run: |
          echo "✅ Deployment successful!"
          echo "🌐 Service URL: ${{ steps.url.outputs.service_url }}"
          echo "📦 Image: gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA"
          echo "🏷️ Commit: $GITHUB_SHA"

  preview:
    needs: test
    runs-on: ubuntu-latest
    name: Deploy Preview Environment
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Build and push Docker image
        run: |
          docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME-pr-${{ github.event.number }}:$GITHUB_SHA .
          docker push gcr.io/$PROJECT_ID/$SERVICE_NAME-pr-${{ github.event.number }}:$GITHUB_SHA

      - name: Deploy preview environment
        run: |
          gcloud run deploy $SERVICE_NAME-pr-${{ github.event.number }} \
            --image gcr.io/$PROJECT_ID/$SERVICE_NAME-pr-${{ github.event.number }}:$GITHUB_SHA \
            --region $REGION \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars PROJECT_ID=$PROJECT_ID \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 3 \
            --timeout 300

      - name: Get preview URL
        id: preview_url
        run: |
          URL=$(gcloud run services describe $SERVICE_NAME-pr-${{ github.event.number }} --region=$REGION --format='value(status.url)')
          echo "preview_url=$URL" >> $GITHUB_OUTPUT

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 **Preview Environment Ready!**\n\n📱 Preview URL: ${{ steps.preview_url.outputs.preview_url }}\n\n*This preview will be automatically cleaned up when the PR is closed.*'
            })

  cleanup-preview:
    runs-on: ubuntu-latest
    name: Cleanup Preview Environment
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Delete preview service
        run: |
          gcloud run services delete $SERVICE_NAME-pr-${{ github.event.number }} \
            --region $REGION \
            --quiet || echo "Service already deleted"

      - name: Delete preview image
        run: |
          gcloud container images delete gcr.io/$PROJECT_ID/$SERVICE_NAME-pr-${{ github.event.number }}:$GITHUB_SHA \
            --quiet || echo "Image already deleted"